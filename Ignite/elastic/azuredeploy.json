{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
	"clusterName": {
	    "type": "string",
	    "defaultValue": "es-azure"
	},
	"vmSku": {
	    "type": "string",
	    "defaultValue": "Standard_D2_v2",
	    "metadata": {
		"description": "Size of VMs in the VM Scale Set."
	    }
	},
	"masterSize": {
	    "type": "string",
	    "defaultValue": "Standard_D2_v2",
	    "metadata": {
		"description": "Size of master VMs."
	    }
	},
	"ubuntuOSVersion": {
	    "type": "string",
	    "defaultValue": "14.04.4-LTS",
	    "allowedValues": [
		"14.04.4-LTS"
	    ],
	    "metadata": {
		"description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values are: 14.04.4-LTS."
	    }
	},
	"vmssName": {
	    "type": "string",
	    "metadata": {
		"description": "String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
	    },
	    "maxLength": 61
	},
	"instanceCount": {
	    "type": "int",
	    "metadata": {
		"description": "Number of VM instances (100 or less)."
	    },
	    "maxValue": 100
	},
	"adminUsername": {
	    "type": "string",
	    "metadata": {
		"description": "Admin username on all VMs."
	    }
	},
	"adminPassword": {
	    "type": "securestring",
	    "metadata": {
		"description": "Admin password on all VMs."
	    }
	},
	"templateBase": {
	    "type": "string",
	    "defaultValue": "https://raw.githubusercontent.com/gatneil/templates/Ignite/Ignite/elastic/",
	    "metadata": {
		"description": "Change this value to your repo name if deploying from a fork"
	    }
	}
    },
    "variables": {
	"storageAccountType": "Standard_LRS",
	"namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
	"longNamingInfix": "[toLower(parameters('vmssName'))]",
	"newStorageAccountSuffix": "[concat(variables('namingInfix'), 'sa')]",
	"uniqueStringArray": [
	    "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '0')))]",
	    "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '1')))]",
	    "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '2')))]",
	    "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '3')))]",
	    "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'), '4')))]"
	],
	"vhdContainerName": "[concat(variables('namingInfix'), 'vhd')]",
	"osDiskName": "[concat(variables('namingInfix'), 'osdisk')]",
	"saCount": "[length(variables('uniqueStringArray'))]",
	"addressPrefix": "10.0.0.0/16",
	"subnetPrefix": "10.0.0.0/24",
	"virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
	"publicIPAddressName": "[concat(variables('namingInfix'), 'pip')]",
	"subnetName": "[concat(variables('namingInfix'), 'subnet')]",
	"loadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
	"publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
	"lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
	"natPoolName": "[concat(variables('namingInfix'), 'natpool')]",
	"bePoolName": "[concat(variables('namingInfix'), 'bepool')]",
	"natStartPort": 50000,
	"natEndPort": 50119,
	"natBackendPort": 22,
	"nicName": "[concat(variables('namingInfix'), 'nic')]",
	"masterName": "[concat(variables('namingInfix'), 'master')]",
	"ipConfigName": "[concat(variables('namingInfix'), 'ipconfig')]",
	"frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
	"lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/', variables('bePoolName'))]",
	"lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe')]",
	"masterStorageAccountName": "[concat(variables('uniqueStringArray')[0], 'master')]",
	"diagnosticsStorageAccountName": "[concat(variables('uniqueStringArray')[0], variables('newStorageAccountSuffix'))]",
	"diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
	"accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
	"wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
	"wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
	"wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
	"wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
	"wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/',variables('namingInfix'))]",
	"wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
	"osType": {
	    "publisher": "Canonical",
	    "offer": "UbuntuServer",
	    "sku": "[parameters('ubuntuOSVersion')]",
	    "version": "latest"
	},
	"imageReference": "[variables('osType')]",
	"computeApiVersion": "2016-04-30-preview",
	"networkApiVersion": "2016-03-30",
	"storageApiVersion": "2015-06-15",
	"insightsApiVersion": "2015-04-01",
	"templateBaseUrl": "[parameters('templateBase')]"
    },
    "resources": [
	{
	    "apiVersion": "2016-03-30",
	    "type": "Microsoft.Network/networkSecurityGroups",
	    "name": "masterNSG",
	    "location": "[resourceGroup().location]",
	    "properties": {
		"securityRules": [
		    {
			"name": "Elasticsearch",
			"properties": {
			    "description": "Allows inbound HTTP traffic from anyone",
			    "protocol": "Tcp",
			    "sourcePortRange": "9200",
			    "destinationPortRange": "9200",
			    "sourceAddressPrefix": "*",
			    "destinationAddressPrefix": "*",
			    "access": "Allow",
			    "priority": 200,
			    "direction": "Inbound"
			}
		    }
		]
	    }
	},
	{
	    "type": "Microsoft.Network/virtualNetworks",
	    "name": "[variables('virtualNetworkName')]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('networkApiVersion')]",
	    "properties": {
		"addressSpace": {
		    "addressPrefixes": [
			"[variables('addressPrefix')]"
		    ]
		},
		"subnets": [
		    {
			"name": "[variables('subnetName')]",
			"properties": {
			    "addressPrefix": "[variables('subnetPrefix')]"
			}
		    }
		]
	    }
	},
	{
	    "type": "Microsoft.Storage/storageAccounts",
	    "name": "[concat(variables('uniqueStringArray')[copyIndex()], variables('newStorageAccountSuffix'))]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('storageApiVersion')]",
	    "copy": {
		"name": "storageLoop",
		"count": "[variables('saCount')]"
	    },
	    "properties": {
		"accountType": "[variables('storageAccountType')]"
	    }
	},
	{
	    "type": "Microsoft.Storage/storageAccounts",
	    "name": "[variables('masterStorageAccountName')]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('storageApiVersion')]",
	    "properties": {
		"accountType": "[variables('storageAccountType')]"
	    }
	},
	{
	    "type": "Microsoft.Network/publicIPAddresses",
	    "name": "[variables('publicIPAddressName')]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('networkApiVersion')]",
	    "properties": {
		"publicIPAllocationMethod": "Dynamic",
		"dnsSettings": {
		    "domainNameLabel": "[variables('longNamingInfix')]"
		}
	    }
	},
	{
	    "type": "Microsoft.Network/loadBalancers",
	    "name": "[variables('loadBalancerName')]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('networkApiVersion')]",
	    "dependsOn": [
		"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
	    ],
	    "properties": {
		"frontendIPConfigurations": [
		    {
			"name": "LoadBalancerFrontEnd",
			"properties": {
			    "publicIPAddress": {
				"id": "[variables('publicIPAddressID')]"
			    }
			}
		    }
		],
		"backendAddressPools": [
		    {
			"name": "[variables('bePoolName')]"
		    }
		],
		"loadBalancingRules": [
		    {
			"name": "LBRule",
			"properties": {
			    "frontendIPConfiguration": {
				"id": "[variables('frontEndIPConfigID')]"
			    },
			    "backendAddressPool": {
				"id": "[variables('lbPoolID')]"
			    },
			    "protocol": "Tcp",
			    "frontendPort": 9200,
			    "backendPort": 9200,
			    "enableFloatingIP": false,
			    "idleTimeoutInMinutes": 5,
			    "probe": {
				"id": "[variables('lbProbeID')]"
			    }
			}
		    }
		],
		"probes": [
		    {
			"name": "tcpProbe",
			"properties": {
			    "protocol": "Tcp",
			    "port": 9200,
			    "intervalInSeconds": 30,
			    "numberOfProbes": 2
			}
		    }
		],
		"inboundNatPools": [
		    {
			"name": "[variables('natPoolName')]",
			"properties": {
			    "frontendIPConfiguration": {
				"id": "[variables('frontEndIPConfigID')]"
			    },
			    "protocol": "tcp",
			    "frontendPortRangeStart": "[variables('natStartPort')]",
			    "frontendPortRangeEnd": "[variables('natEndPort')]",
			    "backendPort": "[variables('natBackendPort')]"
			}
		    }
		]
	    }
	},
	{
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/availabilitySets",
            "name": "es-master-set",
            "location": "[resourceGroup().location]",
            "properties": {
		"platformUpdateDomainCount": 3,
		"platformFaultDomainCount": 3
            }
	},
	{
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('nicName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
		"[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
		"[resourceId('Microsoft.Network/networkSecurityGroups', 'masterNSG')]"
            ],
            "copy": {
		"name": "masterNodesNicLoop",
		"count": 3
            },
            "properties": {
		"ipConfigurations": [
		    {
			"name": "ipconfig1",
			"properties": {
			    "privateIPAllocationMethod": "Static",
			    "privateIPAddress": "[concat('10.0.0.1', copyindex())]",
			    "subnet": {
				"id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnetName'))]"
			    },
			    "networkSecurityGroup": {
				"id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'masterNSG')]"
			    },
			    "loadBalancerBackendAddressPools": [
				{
				    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
				}
			    ]
			}
		    }
		]
            }
	},
	{
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('masterName'), copyindex())]",
            "location": "[resourceGroup().location]",
            "copy": {
		"name": "masterVmLoop",
		"count": 3
            },
            "dependsOn": [
		"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'), copyindex())]",
		"[concat('Microsoft.Compute/availabilitySets/', 'es-master-set')]",
		"[concat('Microsoft.Storage/storageAccounts/', variables('masterStorageAccountName'))]"
            ],
            "properties": {
		"availabilitySet": {
		    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'es-master-set')]"
		},
		"hardwareProfile": {
		    "vmSize": "[parameters('masterSize')]"
		},
		"osProfile": {
		    "computerName": "[concat('master-vm', copyIndex())]",
		    "adminUsername": "[parameters('adminUsername')]",
		    "adminPassword": "[parameters('adminPassword')]",
		    "linuxConfiguration": {}
		},
		"storageProfile": {
		    "imageReference": "[variables('imageReference')]",
		    "osDisk": {
			"name": "osdisk",
			"vhd": {
			    "uri": "[concat('http://',variables('masterStorageAccountName'),'.blob.core.windows.net/vhds/', variables('masterName'), copyindex(), '-osdisk.vhd')]"
			},
			"caching": "ReadWrite",
			"createOption": "FromImage"
		    }
		},
		"networkProfile": {
		    "networkInterfaces": [
			{
			    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicName'), copyindex()))]"
			}
		    ]
		}
            },
            "resources": [
		{
		    "type": "Microsoft.Compute/virtualMachines/extensions",
		    "name": "[concat(variables('masterName'), copyindex(), '/installelasticsearch')]",
		    "apiVersion": "2015-06-15",
		    "location": "[resourceGroup().location]",
		    "dependsOn": [
			"[concat('Microsoft.Compute/virtualMachines/', variables('masterName'), copyindex())]"
		    ],
		    "properties": {
			"publisher": "Microsoft.OSTCExtensions",
			"type": "CustomScriptForLinux",
			"typeHandlerVersion": "1.4",
			"autoUpgradeMinorVersion": true,
			"settings": {
			    "fileUris": [
				"[concat(variables('templateBaseUrl'), 'install-elasticsearch.sh')]"
			    ],
			    "commandToExecute": "[concat('bash install-elasticsearch.sh -m -n ', parameters('clusterName'))]"
			}
                    }
		}
            ]
	},
	{
	    "type": "Microsoft.Compute/virtualMachineScaleSets",
	    "name": "[variables('namingInfix')]",
	    "location": "[resourceGroup().location]",
	    "apiVersion": "[variables('computeApiVersion')]",
	    "dependsOn": [
		"storageLoop",
		"[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
		"[concat('Microsoft.Compute/virtualMachines/', variables('masterName'), '0')]",
		"[concat('Microsoft.Compute/virtualMachines/', variables('masterName'), '1')]",
		"[concat('Microsoft.Compute/virtualMachines/', variables('masterName'), '2')]",
		"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
	    ],
	    "sku": {
		"name": "[parameters('vmSku')]",
		"tier": "Standard",
		"capacity": "[parameters('instanceCount')]"
	    },
	    "properties": {
		"overprovision": "true",
		"upgradePolicy": {
		    "mode": "Manual"
		},
		"virtualMachineProfile": {
		    "storageProfile": {
			"osDisk": {
			    "createOption": "FromImage",
			    "diskSizeGB": 100
			},
			"imageReference": "[variables('imageReference')]",
	      		"dataDisks": [
			    {
				"lun": "1",
				"createOption": "empty",
				"diskSizeGB": "1023"
			    }
			]
		    },
		    "osProfile": {
			"computerNamePrefix": "[variables('namingInfix')]",
			"adminUsername": "[parameters('adminUsername')]",
			"adminPassword": "[parameters('adminPassword')]"
		    },
		    "networkProfile": {
			"networkInterfaceConfigurations": [
			    {
				"name": "[variables('nicName')]",
				"properties": {
				    "primary": true,
				    "ipConfigurations": [
					{
					    "name": "[variables('ipConfigName')]",
					    "properties": {
						"subnet": {
						    "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
						},
						"loadBalancerInboundNatPools": [
						    {
							"id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
						    }
						]
					    }
					}
				    ]
				}
			    }
			]
		    },
		    "extensionProfile": {
			"extensions": [
			    {
				"name": "elasticsearch",
				"properties": {
				    "publisher": "Microsoft.OSTCExtensions",
				    "type": "CustomScriptForLinux",
				    "typeHandlerVersion": "1.4",
				    "autoUpgradeMinorVersion": true,
				    "settings": {
					"fileUris": [
					    "[concat(variables('templateBaseUrl'), 'install-elasticsearch.sh')]"
					],
					"commandToExecute": "[concat('bash install-elasticsearch.sh -n ', parameters('clusterName'))]"
				    }
				}
			    }
			]
		    }
		}
	    }
	}
    ],
    "outputs": {
	"cluster-health": {
	    "type": "string",
	    "value": "[concat('http://', reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpAddressName'))).dnsSettings.fqdn, ':9200/_cluster/health?pretty')]"
	}
    }
}


